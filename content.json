{"meta":{"title":"阿王","subtitle":"做一个爱折腾的程序员","description":"做一个爱折腾的程序员","author":"王瑾深","url":"http://yoursite.com"},"pages":[{"title":"archives","date":"2019-01-16T00:17:08.000Z","updated":"2019-01-16T00:17:08.993Z","comments":true,"path":"archives/index.html","permalink":"http://yoursite.com/archives/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-01-16T00:44:54.271Z","updated":"2019-01-16T00:44:54.271Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"action","slug":"action","date":"2019-01-16T12:57:34.000Z","updated":"2019-01-16T13:00:03.199Z","comments":true,"path":"2019/01/16/action/","link":"","permalink":"http://yoursite.com/2019/01/16/action/","excerpt":"","text":"wepy-redux安装1cnpm install redux redux-actions redux-promise wepy-redux --save 创建 store12345678910import &#123; createStore, applyMiddleware &#125; from \"redux\";import Reducers from \"./reducer\";import promiseMiddleware from \"redux-promise\";//写法一：export default function configStore() &#123; return createStore(Reducers, applyMiddleware(promiseMiddleware))&#125;//写法二export default createStore(Reducers, applyMiddleware(promiseMiddleware)) 创建 reducerrank.js123456789101112131415const defaultState = &#123; rankList: [1, 2, 3]&#125;const rankReducer = (state = defaultState, action) =&gt; &#123; const &#123; type, payload &#125; = action; switch (type) &#123; case \"UPDATE\": return &#123; ...state, rankList: payload &#125; default: return state; &#125;&#125;export default rankReducer; index.js1234567891011121314import &#123; combineReducers &#125; from \"redux\";import rankReducer from \"./rank\";import topListReducer from \"./toplist\";import searchReducer from \"./search\";const Reducers = combineReducers(&#123; rankReducer, topListReducer, searchReducer, ...&#125;)export default Reducers; 创建 action12345678910111213141516171819202122import &#123; RNAK_UPDATE &#125; from \"../type/rank\";import &#123; createAction &#125; from \"redux-actions\";import axios from \"@/utils/request\";//方式一:export function update(payload) &#123; return &#123; type: RNAK_UPDATE, payload &#125;&#125;//方式二：const getJson = async function(url) &#123; let result = await axios.get(url); return result.data.data.slider;&#125;export const update = createAction(RNAK_UPDATE, () =&gt; &#123; const url = \"https://c.y.qq.com/musichall/fcgi-bin/fcg_yqqhomepagerecommend.fcg\"; return getJson(url);&#125;) 创建 type12export const RNAK_UPDATE = \"UPDATE\";export const TOPLIST_UPDATE = \"UPDATE\"; 绑定及监听在app.wepy文件中，添加下面代码：123import &#123; setStore &#125; from 'wepy-redux'import store from './store'setStore(store) setStore()是用来将仓库中的数据绑定到页面中 类似react-redux中的 &lt;Provider store={store}&gt;&lt;/Provider&gt;组件","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://yoursite.com/tags/react/"},{"name":"redux","slug":"redux","permalink":"http://yoursite.com/tags/redux/"}]},{"title":"react-component-父子通讯","slug":"react-component-父子通讯","date":"2019-01-16T10:13:12.000Z","updated":"2019-01-16T12:53:52.914Z","comments":true,"path":"2019/01/16/react-component-父子通讯/","link":"","permalink":"http://yoursite.com/2019/01/16/react-component-父子通讯/","excerpt":"","text":"组件通讯父子通讯父级组件调用子组件，通过props来传递参数，子组件通过this.props来接收 1234567891011121314151617181920import React from \"react\";class Children extends React.Component&#123; render()&#123; const &#123; datalist &#125; = this.props; return &lt;div&gt; &lt;/div&gt; &#125;&#125;class Parent extends React.Component&#123; render()&#123; const &#123; datalist &#125; = []; return &lt;div&gt; &lt;Children datalist=&#123;datalist&#125;&gt;&lt;/Children&gt; &lt;/div&gt; &#125;&#125; 子父通讯父级组件通过props给子组件传递一个回调函数，子级组件调用父级传递过来的回调，将参数返回1234567891011121314151617181920212223242526import React from \"react\";class Children extends React.Component&#123; componentDidMount()&#123; const &#123; getData &#125; = this.props; getData([1,2,3,4,5]) &#125; render()&#123; return &lt;div&gt; this is children &lt;/div&gt; &#125;&#125;class Parent extends React.Component&#123; getData(val)&#123; //[1,2,3,4,5] console.log(val) &#125; render()&#123; return &lt;div&gt; &lt;Children getData=&#123;this.getData&#125;&gt;&lt;/Children&gt; &lt;/div&gt; &#125;&#125; 同级通讯1npm install --save events 12345678910const EventEmitter = require('events') const EventBus = new EventEmitter()//事件订阅EventBus.on(\"message\", function (text) &#123; console.log(text) //hello world&#125;)//事件发布EventBus.emit(\"message\", 'hello world') 跨级通讯案例描述: 当前有三个组件，包裹顺序依次是： Parent &gt; Middle &gt; Children现在 Parent组件有数据要传递给 Children组件 Parent &gt; Middle &gt; Children具体方案请参考 props 传参 Parent &gt; Children具体方案如下，通context对象完成数据传递： 12345678910111213141516171819202122232425262728293031323334353637383940414243import React from \"react\";import PropTypes from \"prop-types\";// 子级class Children extends React.Component&#123; static contextTypes = &#123; propA: PropTypes.string methodA: PropTypes.func &#125; render()&#123; return &lt;div&gt; this is children: &#123;this.context.propA&#125; &lt;/div&gt; &#125;&#125;// 中间class Middle extends React.Component &#123; render () &#123; return &lt;Children /&gt; &#125;&#125;// 父级class Parent extends React.Component&#123; // 声明Context对象属性 static childContextTypes = &#123; propA: PropTypes.string, methodA: PropTypes.func &#125; // 返回Context对象，方法名是约定好的 getChildContext () &#123; return &#123; propA: 'propA', methodA: () =&gt; 'methodA' &#125; &#125; render()&#123; return &lt;div&gt; &lt;Middle/&gt; &lt;/div&gt; &#125;&#125; redux全局状态的管理库，详情请看redux指南","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://yoursite.com/tags/react/"}]},{"title":"react","slug":"react","date":"2019-01-15T15:37:25.000Z","updated":"2019-01-15T15:37:36.189Z","comments":true,"path":"2019/01/15/react/","link":"","permalink":"http://yoursite.com/2019/01/15/react/","excerpt":"","text":"","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://yoursite.com/tags/react/"}]},{"title":"测试  Holle world","slug":"测试-Holle-world","date":"2019-01-15T11:30:49.000Z","updated":"2019-01-16T00:20:07.491Z","comments":true,"path":"2019/01/15/测试-Holle-world/","link":"","permalink":"http://yoursite.com/2019/01/15/测试-Holle-world/","excerpt":"","text":"","categories":[],"tags":[{"name":"tags","slug":"tags","permalink":"http://yoursite.com/tags/tags/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-01-15T11:16:02.854Z","updated":"2019-01-16T06:47:52.083Z","comments":true,"path":"2019/01/15/hello-world/","link":"","permalink":"http://yoursite.com/2019/01/15/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"bolg","slug":"bolg","permalink":"http://yoursite.com/tags/bolg/"}]}]}